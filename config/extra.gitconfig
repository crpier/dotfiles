; vim:filetype=c

[pull]
	rebase = false
[push]
    default = current
[init]
	defaultBranch = main
[core]
    editor = nvim
[alias]
; reddit got the darndest tricks
    lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    lg = !"git lg1"

[delta]
  line-numbers = true
  syntax-theme = gruvbox
  side-by-side = false

  file-modified-label = modified:

[interactive]
  diffFilter = delta --color-only

[alias]
  # list files which have changed since REVIEW_BASE
  files = !git diff --name-only $(git merge-base HEAD main)

  # Same as above, but with a diff stat instead of just names
  # (better for interactive use)
  stat = !git diff --stat $(git merge-base HEAD main)

  # NOTE: These aliases depend on the `git files` alias from
  # a few sections ago!

  # Open all files changed since REVIEW_BASE in Vim tabs
  # Then, run fugitive's :Gdiff in each tab, and finally
  # tell vim-gitgutter to show +/- for changes since REVIEW_BASE
  review = !nvim -p $(git files) +\"tabdo Gdiff main\" +\"let g:gitgutter_diff_base = 'main'\"

  # Same as the above, except specify names of files as arguments,
  # instead of opening all files:
  # git reviewone foo.js bar.js
  reviewone = !nvim -p +\"tabdo Gdiff main\" +\"let g:gitgutter_diff_base = 'main'\"
